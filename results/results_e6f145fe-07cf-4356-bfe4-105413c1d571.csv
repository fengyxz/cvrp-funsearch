dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n32-k5,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,1355.7857480344153,2.258202075958252,"[[0, 12, 7, 27, 4, 28, 23, 0], [0, 16, 26, 30, 20, 5, 25, 29, 9, 14, 0], [0, 6, 2, 31, 21, 1, 3, 11, 8, 0], [0, 24, 13, 17, 19, 0], [0, 15, 22, 18, 10, 0]]",2025-04-18 00:46:04
A-n37-k5,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,1071.4910898063904,2.234863042831421,"[[0, 29, 4, 15, 30, 18, 25, 10, 13, 33, 7, 0], [0, 17, 2, 19, 14, 12, 6, 0], [0, 1, 20, 8, 11, 9, 23, 24, 27, 35, 3, 0], [0, 16, 22, 5, 34, 28, 31, 26, 32, 36, 0], [0, 21, 0]]",2025-04-18 00:46:06
A-n45-k6,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,1756.9063625805722,2.2589571475982666,"[[0, 37, 21, 8, 5, 16, 42, 4, 0], [0, 25, 2, 35, 26, 24, 29, 7, 9, 0], [0, 38, 12, 23, 10, 41, 22, 39, 36, 33, 0], [0, 15, 1, 44, 6, 31, 14, 0], [0, 20, 13, 32, 28, 34, 11, 0], [0, 3, 30, 40, 19, 17, 18, 0], [0, 43, 27, 0]]",2025-04-18 00:46:08
A-n48-k7,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,1744.2526103622638,2.234616756439209,"[[0, 34, 11, 15, 27, 39, 20, 8, 0], [0, 41, 10, 30, 13, 26, 36, 0], [0, 18, 32, 35, 46, 9, 7, 43, 25, 0], [0, 6, 3, 37, 19, 38, 45, 0], [0, 16, 33, 29, 21, 4, 42, 24, 28, 2, 0], [0, 47, 1, 12, 5, 22, 31, 0], [0, 17, 40, 44, 23, 14, 0]]",2025-04-18 00:46:10
A-n53-k7,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,1799.59363215633,2.198695182800293,"[[0, 16, 48, 28, 35, 40, 50, 32, 15, 23, 39, 0], [0, 17, 41, 24, 34, 52, 11, 0], [0, 10, 26, 29, 30, 18, 27, 1, 31, 0], [0, 45, 12, 51, 46, 38, 44, 20, 0], [0, 2, 36, 4, 7, 3, 5, 13, 9, 0], [0, 8, 49, 43, 19, 42, 37, 0], [0, 6, 22, 47, 14, 21, 25, 0], [0, 33, 0]]",2025-04-18 00:46:13
A-n63-k10,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,2411.612386649889,2.4538519382476807,"[[0, 25, 56, 41, 1, 39, 3, 5, 0], [0, 17, 51, 35, 37, 27, 0], [0, 30, 48, 15, 18, 52, 0], [0, 21, 7, 58, 47, 22, 40, 62, 20, 43, 0], [0, 36, 26, 38, 61, 54, 29, 53, 0], [0, 33, 23, 55, 14, 49, 0], [0, 13, 31, 34, 28, 50, 59, 42, 45, 9, 19, 0], [0, 16, 46, 32, 0], [0, 4, 44, 11, 10, 60, 57, 0], [0, 8, 12, 2, 6, 24, 0]]",2025-04-18 00:46:15
A-n80-k10,0,"
```python
def construction_heuristic(individual: List[List[int]], data: CVRPData) -> float:
    # 适应度为总路径距离（越小越好）
    return sum(
        data.distance_matrix[route[i]][route[i + 1]]
        for route in individual for i in range(len(route) - 1)
    )
```
        ",True,3586.6065575761263,2.675541877746582,"[[0, 10, 14, 48, 9, 55, 25, 56, 54, 40, 0], [0, 17, 74, 61, 57, 29, 0], [0, 45, 60, 63, 23, 28, 0], [0, 30, 51, 75, 20, 66, 22, 50, 32, 0], [0, 42, 62, 11, 39, 1, 0], [0, 36, 76, 33, 15, 73, 5, 8, 68, 7, 0], [0, 59, 6, 19, 78, 34, 16, 43, 65, 69, 52, 0], [0, 3, 31, 26, 35, 46, 27, 79, 24, 47, 41, 58, 0], [0, 12, 71, 2, 67, 49, 53, 77, 4, 13, 0], [0, 37, 18, 21, 70, 38, 72, 64, 44, 0]]",2025-04-18 00:46:18
