dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n48-k7,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering both distance and capacity utilization
    distance_weight = 1.0
    capacity_weight = 0.5
    
    # Normalize distance and capacity factors
    normalized_distance = ctx.distance / np.max(ctx.locations)
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return distance_weight * normalized_distance - capacity_weight * capacity_utilization
```",True,1406.0586606667428,1.869319200515747,"[[0, 23, 43, 31, 5, 22, 32, 35, 44, 18, 0], [0, 14, 17, 47, 10, 21, 16, 0], [0, 12, 1, 6, 36, 7, 34, 29, 0], [0, 41, 2, 33, 30, 46, 13, 4, 42, 0], [0, 40, 45, 27, 15, 8, 39, 3, 0], [0, 38, 25, 19, 37, 20, 26, 9, 0], [0, 28, 24, 11, 0]]",2025-04-10 19:30:32
A-n48-k7,1,"Here's the improved `construction_heuristic` function:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and capacity utilization
    distance_factor = ctx.distance / np.max(ctx.locations)
    capacity_factor = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Weighted combination favoring closer nodes and better capacity utilization
    return 0.7 * distance_factor + 0.3 * (1 - capacity_factor)
```",True,1364.0789453941977,1.8244507312774658,"[[0, 23, 43, 31, 5, 22, 32, 35, 44, 18, 0], [0, 14, 17, 47, 10, 21, 16, 0], [0, 12, 1, 6, 36, 7, 34, 29, 0], [0, 41, 2, 33, 30, 46, 13, 4, 42, 0], [0, 40, 45, 27, 15, 8, 39, 3, 0], [0, 28, 9, 24, 11, 26, 20, 37, 38, 0], [0, 19, 25, 0]]",2025-04-10 19:30:34
A-n48-k7,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Balanced heuristic considering distance and capacity utilization
    distance_score = ctx.distance / np.max(ctx.locations)
    capacity_score = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Weighted combination with adjusted weights
    return 0.8 * distance_score + 0.2 * (1 - capacity_score)
```",True,1470.696272125877,1.8208811283111572,"[[0, 23, 43, 31, 5, 22, 32, 35, 44, 18, 0], [0, 14, 17, 47, 10, 21, 16, 0], [0, 12, 1, 6, 38, 19, 3, 7, 29, 0], [0, 41, 2, 33, 30, 46, 13, 4, 42, 0], [0, 40, 34, 24, 45, 37, 25, 36, 0], [0, 28, 9, 15, 26, 39, 8, 27, 0], [0, 20, 11, 0]]",2025-04-10 19:30:36
A-n48-k7,3,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and demand-to-capacity ratio
    distance_score = ctx.distance / np.max(ctx.locations)
    capacity_ratio = ctx.demand / ctx.vehicle_capacity
    
    # Weighted combination favoring closer nodes with higher demand-to-capacity ratio
    return 0.6 * distance_score + 0.4 * (1 - capacity_ratio)
```",True,1363.6671386805056,1.8519387245178223,"[[0, 18, 35, 36, 37, 38, 44, 0], [0, 14, 17, 47, 10, 21, 16, 0], [0, 23, 43, 31, 12, 5, 1, 22, 32, 0], [0, 41, 2, 33, 30, 46, 13, 4, 42, 0], [0, 6, 25, 19, 3, 26, 39, 9, 0], [0, 40, 45, 27, 8, 20, 15, 24, 29, 0], [0, 7, 11, 34, 28, 0]]",2025-04-10 19:30:38
A-n48-k7,4,"Here's the improved `construction_heuristic` function that balances distance and capacity utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined heuristic considering normalized distance and capacity utilization
    normalized_dist = ctx.distance / np.max(ctx.locations)
    capacity_util = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Weighted score favoring closer nodes and better capacity utilization
    return 0.6 * normalized_dist + 0.4 * (1 - capacity_util)
```",True,1363.6671386805056,1.806957721710205,"[[0, 18, 35, 36, 37, 38, 44, 0], [0, 14, 17, 47, 10, 21, 16, 0], [0, 23, 43, 31, 12, 5, 1, 22, 32, 0], [0, 41, 2, 33, 30, 46, 13, 4, 42, 0], [0, 6, 25, 19, 3, 26, 39, 9, 0], [0, 40, 45, 27, 8, 20, 15, 24, 29, 0], [0, 7, 11, 34, 28, 0]]",2025-04-10 19:30:40
