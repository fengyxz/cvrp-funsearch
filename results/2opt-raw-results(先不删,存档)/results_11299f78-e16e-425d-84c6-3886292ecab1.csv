dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n53-k7,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Improved heuristic considering both distance and capacity utilization.""""""
    # Distance component (normalized)
    distance_score = ctx.distance / np.max(ctx.locations)
    # Capacity utilization component (higher utilization is better)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    # Combined score with weights (tuned through evolution)
    return 0.7 * distance_score + 0.3 * (1 - utilization)
```",True,1420.7612917415822,1.8299310207366943,"[[0, 1, 4, 28, 22, 7, 17, 41, 11, 9, 47, 25, 39, 0], [0, 33, 6, 20, 31, 27, 29, 44, 51, 0], [0, 3, 5, 14, 21, 34, 24, 19, 36, 0], [0, 35, 38, 49, 46, 8, 0], [0, 30, 37, 2, 42, 48, 45, 0], [0, 12, 16, 32, 15, 23, 43, 50, 10, 0], [0, 18, 40, 26, 52, 13, 0]]",2025-04-10 19:41:04
A-n63-k10,0,"Here's the improved `construction_heuristic` function that considers both distance and vehicle load utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Weighted combination of distance and remaining capacity utilization
    distance_weight = 0.7
    capacity_weight = 0.3
    
    # Normalized remaining capacity (higher is better)
    remaining_capacity = ctx.vehicle_capacity - ctx.vehicle_load
    normalized_capacity = (remaining_capacity - ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * ctx.distance) - (capacity_weight * normalized_capacity)
```",True,1834.4134100161646,1.8170928955078125,"[[0, 52, 36, 48, 30, 4, 50, 29, 0], [0, 20, 26, 13, 28, 62, 17, 11, 7, 41, 0], [0, 56, 40, 25, 15, 49, 18, 5, 45, 39, 19, 59, 0], [0, 38, 43, 10, 42, 3, 1, 21, 0], [0, 61, 54, 16, 23, 24, 51, 31, 0], [0, 57, 32, 44, 47, 34, 22, 0], [0, 53, 14, 2, 9, 12, 0], [0, 46, 60, 8, 0], [0, 58, 55, 33, 37, 0], [0, 35, 27, 6, 0]]",2025-04-10 19:41:17
P-n65-k10,0,"Here's the improved `construction_heuristic` function that considers both distance and vehicle load utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Improved heuristic considering both distance and capacity utilization.""""""
    distance_weight = 1.0
    utilization_weight = 0.5
    normalized_distance = ctx.distance / np.max(ctx.locations)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return distance_weight * normalized_distance - utilization_weight * utilization
```

This implementation:
1. Normalizes the distance by dividing by maximum location coordinate
2. Considers both distance and capacity utilization
3. Uses weights to balance between distance minimization and load maximization
4. Returns a combined score where lower values are better

The function avoids the AttributeError by only using attributes available in the ConstructionContext dataclass.",True,1073.6772669037653,1.843168020248413,"[[0, 4, 45, 29, 48, 30, 6, 49, 0], [0, 26, 39, 9, 32, 40, 23, 0], [0, 17, 12, 58, 10, 38, 53, 0], [0, 34, 52, 27, 13, 54, 19, 46, 0], [0, 2, 28, 62, 1, 63, 33, 0], [0, 51, 16, 24, 18, 55, 50, 44, 3, 0], [0, 7, 8, 35, 14, 11, 25, 0], [0, 5, 47, 21, 61, 64, 22, 0], [0, 57, 15, 37, 20, 60, 36, 42, 41, 43, 0], [0, 56, 31, 59, 0]]",2025-04-10 19:41:32
A-n80-k10,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Improved construction heuristic considering both distance and demand utilization.""""""
    # Weighted combination of distance and remaining capacity utilization
    distance_weight = 1.0
    utilization_weight = 0.5  # Balances distance and capacity utilization
    
    remaining_capacity = ctx.vehicle_capacity - ctx.vehicle_load
    utilization_score = ctx.demand / remaining_capacity if remaining_capacity > 0 else float('inf')
    
    return (distance_weight * ctx.distance) + (utilization_weight * utilization_score)
```",True,2176.160031083629,1.8492059707641602,"[[0, 49, 73, 36, 77, 3, 31, 29, 51, 42, 0], [0, 40, 21, 1, 7, 10, 14, 71, 33, 0], [0, 13, 53, 70, 76, 50, 58, 38, 66, 67, 0], [0, 74, 59, 27, 17, 60, 39, 0], [0, 62, 23, 6, 30, 5, 44, 12, 0], [0, 63, 11, 34, 2, 37, 8, 68, 24, 0], [0, 72, 32, 4, 22, 45, 54, 9, 47, 15, 64, 0], [0, 52, 28, 79, 48, 18, 78, 20, 0], [0, 46, 25, 41, 55, 56, 69, 65, 35, 26, 19, 75, 16, 0], [0, 57, 43, 61, 0]]",2025-04-10 19:41:43
E-n76-k14,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering both distance and capacity utilization
    distance_weight = 1.0
    capacity_weight = 0.5
    utilization = ctx.demand / (ctx.vehicle_capacity - ctx.vehicle_load + 1e-6)
    return distance_weight * ctx.distance + capacity_weight * utilization
```",False,N/A,1.908052921295166,[],2025-04-10 19:41:54
