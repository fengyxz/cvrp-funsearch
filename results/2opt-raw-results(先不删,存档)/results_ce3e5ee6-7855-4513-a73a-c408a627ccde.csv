dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n53-k7,0,"Here's the improved `construction_heuristic` function that considers both distance and vehicle load utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined score considering both distance and vehicle load utilization
    distance_weight = 0.7
    utilization_weight = 0.3
    
    # Normalized distance (smaller is better)
    normalized_distance = ctx.distance / np.max(ctx.locations)
    
    # Load utilization (higher is better)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_distance - 
            utilization_weight * utilization)
```",True,1420.7612917415822,1.9519340991973877,"[[0, 1, 4, 28, 22, 7, 17, 41, 11, 9, 47, 25, 39, 0], [0, 33, 6, 20, 31, 27, 29, 44, 51, 0], [0, 3, 5, 14, 21, 34, 24, 19, 36, 0], [0, 35, 38, 49, 46, 8, 0], [0, 30, 37, 2, 42, 48, 45, 0], [0, 12, 16, 32, 15, 23, 43, 50, 10, 0], [0, 18, 40, 26, 52, 13, 0]]",2025-04-10 19:45:35
A-n53-k7,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined score with adjusted weights for distance and demand
    distance_weight = 0.6
    demand_weight = 0.4
    
    # Normalize distance by max possible distance in the problem
    max_dist = np.max([np.linalg.norm(np.array(a)-np.array(b)) 
                       for a in ctx.locations for b in ctx.locations])
    norm_dist = ctx.distance / max_dist
    
    # Normalize demand by vehicle capacity
    norm_demand = ctx.demand / ctx.vehicle_capacity
    
    return distance_weight * norm_dist + demand_weight * norm_demand
```",True,1492.4951712978734,16.547589778900146,"[[0, 39, 25, 34, 52, 11, 24, 41, 9, 7, 28, 22, 44, 29, 51, 4, 1, 0], [0, 31, 10, 26, 40, 18, 6, 20, 0], [0, 3, 5, 14, 21, 13, 19, 0], [0, 27, 8, 46, 30, 49, 36, 50, 23, 15, 0], [0, 47, 12, 48, 45, 2, 37, 0], [0, 33, 35, 38, 43, 0], [0, 17, 16, 32, 42, 0]]",2025-04-10 19:45:52
A-n53-k7,2,"Here's the improved `construction_heuristic` function that balances distance and capacity utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Weighted combination of distance and capacity utilization
    alpha = 0.6  # distance weight
    beta = 0.4   # capacity utilization weight
    
    # Normalize distance by maximum possible distance between current location and candidates
    max_dist = max(np.linalg.norm(ctx.locations[ctx.depot] - loc) for loc in ctx.locations)
    norm_dist = ctx.distance / max_dist
    
    # Calculate capacity utilization ratio
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return alpha * norm_dist + beta * (1 - utilization)
```",False,N/A,1.8440799713134766,[],2025-04-10 19:45:53
A-n53-k7,3,"Here's the improved `construction_heuristic` function that balances distance and capacity utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Weighted combination of distance and capacity utilization
    distance_weight = 0.6
    capacity_weight = 0.4
    
    # Normalize distance by maximum possible distance
    max_distance = np.max([np.linalg.norm(np.array(a)-np.array(b)) 
                          for a in ctx.locations for b in ctx.locations])
    normalized_distance = ctx.distance / max_distance
    
    # Calculate capacity utilization
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_distance + 
            capacity_weight * (1 - capacity_utilization))
```",True,1262.0491649307469,15.963913917541504,"[[0, 33, 20, 6, 35, 18, 40, 0], [0, 1, 4, 46, 8, 38, 27, 51, 0], [0, 31, 47, 17, 11, 24, 52, 25, 39, 0], [0, 3, 5, 14, 13, 21, 7, 0], [0, 28, 22, 45, 42, 19, 15, 32, 48, 12, 0], [0, 9, 34, 41, 16, 23, 43, 50, 36, 37, 49, 29, 0], [0, 30, 44, 26, 10, 2, 0]]",2025-04-10 19:46:09
A-n63-k10,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering both distance and capacity utilization
    distance_weight = 1.0
    utilization_weight = 0.5  # Balances distance and capacity utilization
    
    # Normalized distance (0-1 range)
    normalized_dist = ctx.distance / np.max(ctx.locations)
    
    # Capacity utilization ratio (0-1 range)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return distance_weight * normalized_dist - utilization_weight * utilization
```",True,1842.3407754366644,1.9019899368286133,"[[0, 52, 36, 48, 30, 4, 50, 29, 0], [0, 17, 7, 39, 45, 49, 15, 25, 40, 56, 0], [0, 20, 26, 13, 28, 57, 44, 0], [0, 10, 59, 18, 5, 3, 41, 11, 38, 43, 0], [0, 62, 31, 46, 54, 21, 0], [0, 53, 14, 12, 2, 1, 42, 0], [0, 61, 23, 60, 37, 16, 0], [0, 32, 34, 47, 51, 22, 58, 24, 19, 0], [0, 55, 33, 27, 35, 0], [0, 9, 6, 8, 0]]",2025-04-10 19:46:51
A-n63-k10,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and capacity utilization
    distance_score = ctx.distance
    capacity_score = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return 0.7 * distance_score + 0.3 * capacity_score * np.mean(ctx.locations)
```",True,2038.1912362646447,1.7772879600524902,"[[0, 48, 36, 30, 38, 4, 20, 50, 7, 0], [0, 52, 43, 26, 13, 28, 62, 29, 39, 45, 0], [0, 17, 40, 25, 15, 49, 41, 18, 5, 19, 59, 0], [0, 11, 51, 24, 23, 21, 61, 54, 56, 42, 0], [0, 31, 44, 47, 34, 22, 58, 1, 0], [0, 10, 3, 8, 14, 53, 0], [0, 57, 32, 55, 33, 0], [0, 16, 35, 37, 60, 0], [0, 46, 27, 9, 0], [0, 2, 12, 6, 0]]",2025-04-10 19:46:52
A-n63-k10,2,"Here's the improved `construction_heuristic` function:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering distance, capacity utilization and spatial proximity
    distance_score = ctx.distance
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    proximity_score = np.linalg.norm(ctx.locations[ctx.depot] - ctx.locations[ctx.candidate])
    
    return (0.6 * distance_score + 
            0.3 * capacity_utilization + 
            0.1 * proximity_score)
```",False,N/A,1.614645004272461,[],2025-04-10 19:46:54
A-n63-k10,3,"Here's the improved `construction_heuristic` function:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering distance, demand and capacity utilization
    distance_score = ctx.distance
    demand_score = ctx.demand
    capacity_ratio = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Weighted combination favoring closer nodes with higher demand
    return 0.5 * distance_score + 0.3 * (1 - capacity_ratio) + 0.2 * (1 / (demand_score + 1))
```",True,1855.9918472144668,1.7787330150604248,"[[0, 52, 36, 48, 30, 4, 50, 29, 0], [0, 20, 26, 13, 28, 57, 44, 7, 0], [0, 17, 62, 31, 24, 21, 61, 54, 45, 40, 0], [0, 38, 43, 10, 59, 18, 5, 39, 49, 15, 0], [0, 19, 42, 1, 41, 14, 53, 25, 56, 11, 0], [0, 32, 34, 47, 51, 58, 22, 23, 0], [0, 16, 27, 8, 37, 60, 0], [0, 46, 55, 0], [0, 3, 2, 9, 12, 0], [0, 33, 6, 35, 0]]",2025-04-10 19:46:56
P-n65-k10,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Improved construction heuristic considering both distance and capacity utilization.""""""
    distance_weight = 1.0
    demand_weight = 0.5
    capacity_utilization = ctx.vehicle_load / ctx.vehicle_capacity
    
    # Combine distance and demand with capacity utilization factor
    return (distance_weight * ctx.distance + 
            demand_weight * ctx.demand * (1 - capacity_utilization))
```",True,1118.174684303126,1.8118798732757568,"[[0, 26, 12, 17, 51, 62, 2, 6, 0], [0, 34, 52, 27, 13, 54, 19, 35, 7, 49, 0], [0, 4, 45, 29, 37, 36, 47, 48, 0], [0, 46, 8, 53, 14, 59, 15, 0], [0, 3, 44, 32, 50, 18, 55, 25, 39, 0], [0, 30, 5, 57, 20, 60, 21, 23, 0], [0, 16, 63, 41, 42, 43, 1, 33, 0], [0, 11, 38, 10, 58, 22, 0], [0, 40, 9, 31, 24, 61, 0], [0, 28, 64, 56, 0]]",2025-04-10 19:47:37
P-n65-k10,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Improved heuristic balancing distance, demand and capacity utilization.""""""
    distance_weight = 1.2
    demand_weight = 0.7
    capacity_factor = 0.5 * (1 + ctx.vehicle_load/ctx.vehicle_capacity)
    
    return distance_weight * ctx.distance + demand_weight * ctx.demand * capacity_factor
```",True,1010.9988872192325,1.8094415664672852,"[[0, 26, 12, 55, 3, 49, 23, 63, 6, 51, 17, 0], [0, 34, 52, 27, 13, 57, 15, 29, 45, 0], [0, 4, 37, 60, 36, 47, 48, 30, 0], [0, 46, 8, 54, 19, 35, 53, 7, 0], [0, 2, 62, 22, 42, 41, 43, 1, 0], [0, 40, 25, 18, 50, 32, 44, 0], [0, 16, 33, 28, 61, 21, 0], [0, 11, 38, 10, 58, 39, 0], [0, 5, 20, 14, 59, 31, 0], [0, 9, 24, 56, 64, 0]]",2025-04-10 19:47:39
P-n65-k10,2,"Here's the improved `construction_heuristic` function that balances distance, demand, and capacity utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Optimized heuristic considering distance, demand and vehicle load balance.""""""
    distance_weight = 1.0
    demand_weight = 0.8
    capacity_factor = 1.0 - (ctx.vehicle_load / ctx.vehicle_capacity)
    
    return (distance_weight * ctx.distance + 
            demand_weight * ctx.demand * capacity_factor)
```",True,1063.7237084465942,1.7773199081420898,"[[0, 26, 12, 17, 51, 62, 2, 6, 0], [0, 34, 52, 27, 13, 57, 15, 20, 37, 49, 0], [0, 7, 35, 19, 54, 8, 46, 4, 0], [0, 3, 44, 32, 50, 18, 55, 25, 39, 0], [0, 45, 29, 5, 60, 36, 47, 48, 63, 0], [0, 30, 22, 42, 41, 56, 23, 43, 1, 0], [0, 16, 33, 28, 61, 21, 0], [0, 58, 10, 38, 53, 14, 0], [0, 40, 9, 31, 11, 0], [0, 64, 24, 59, 0]]",2025-04-10 19:47:40
P-n65-k10,3,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """"""Optimized heuristic combining distance, demand and capacity utilization.""""""
    distance_score = ctx.distance / max(1, np.max(ctx.locations))
    demand_score = ctx.demand / ctx.vehicle_capacity
    capacity_utilization = ctx.vehicle_load / ctx.vehicle_capacity
    
    return (0.6 * distance_score + 
            0.3 * demand_score + 
            0.1 * capacity_utilization)
```",True,1027.1976329498325,1.8239507675170898,"[[0, 26, 12, 17, 51, 62, 2, 6, 0], [0, 34, 52, 27, 13, 54, 19, 35, 7, 49, 0], [0, 4, 45, 29, 37, 36, 47, 48, 0], [0, 46, 8, 53, 14, 59, 15, 0], [0, 30, 5, 57, 20, 60, 21, 23, 0], [0, 3, 44, 32, 50, 18, 55, 25, 39, 0], [0, 58, 10, 9, 40, 16, 0], [0, 63, 1, 43, 42, 41, 56, 24, 0], [0, 33, 22, 64, 61, 28, 0], [0, 11, 38, 31, 0]]",2025-04-10 19:47:42
A-n80-k10,0,"Here's an improved implementation of the `construction_heuristic` function that considers both distance and vehicle load utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined heuristic considering distance and vehicle load utilization
    distance_weight = 0.6
    utilization_weight = 0.4
    
    # Normalized distance (lower is better)
    normalized_distance = ctx.distance / np.max(ctx.locations)
    
    # Utilization score (higher is better)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_distance - 
            utilization_weight * utilization)
```",True,2296.9963100894274,1.8521239757537842,"[[0, 49, 73, 36, 53, 31, 3, 77, 42, 0], [0, 40, 21, 7, 1, 54, 72, 67, 51, 13, 0], [0, 66, 15, 33, 45, 32, 50, 76, 58, 38, 0], [0, 74, 59, 27, 17, 60, 39, 0], [0, 62, 63, 11, 24, 6, 30, 78, 43, 47, 0], [0, 70, 22, 4, 9, 55, 65, 41, 25, 0], [0, 29, 5, 44, 12, 23, 52, 28, 14, 71, 0], [0, 10, 48, 18, 79, 2, 8, 34, 0], [0, 64, 46, 20, 75, 19, 57, 16, 61, 0], [0, 37, 68, 26, 35, 69, 56, 0]]",2025-04-10 19:48:28
A-n80-k10,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and demand/remaining capacity ratio
    distance_score = ctx.distance / np.max(ctx.locations)
    capacity_ratio = ctx.demand / (ctx.vehicle_capacity - ctx.vehicle_load + 1e-6)
    return 0.7 * distance_score + 0.3 * capacity_ratio
```",True,2488.063061842963,1.8147330284118652,"[[0, 49, 73, 36, 53, 67, 66, 70, 72, 54, 33, 15, 47, 65, 35, 26, 43, 78, 34, 77, 51, 0], [0, 40, 21, 14, 44, 27, 31, 1, 13, 42, 0], [0, 7, 10, 71, 48, 28, 52, 24, 30, 0], [0, 3, 60, 39, 64, 46, 25, 75, 16, 0], [0, 38, 58, 76, 50, 32, 4, 45, 56, 0], [0, 74, 29, 5, 8, 11, 23, 12, 0], [0, 62, 63, 6, 37, 68, 19, 0], [0, 17, 59, 20, 57, 69, 41, 0], [0, 79, 18, 2, 61, 0], [0, 22, 9, 55, 0]]",2025-04-10 19:48:29
A-n80-k10,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and demand/remaining capacity ratio
    distance_score = ctx.distance / np.max(ctx.locations)
    capacity_ratio = ctx.demand / (ctx.vehicle_capacity - ctx.vehicle_load + 1e-6)
    return 0.7 * distance_score + 0.3 * capacity_ratio
```",True,2488.063061842963,1.8303678035736084,"[[0, 49, 73, 36, 53, 67, 66, 70, 72, 54, 33, 15, 47, 65, 35, 26, 43, 78, 34, 77, 51, 0], [0, 40, 21, 14, 44, 27, 31, 1, 13, 42, 0], [0, 7, 10, 71, 48, 28, 52, 24, 30, 0], [0, 3, 60, 39, 64, 46, 25, 75, 16, 0], [0, 38, 58, 76, 50, 32, 4, 45, 56, 0], [0, 74, 29, 5, 8, 11, 23, 12, 0], [0, 62, 63, 6, 37, 68, 19, 0], [0, 17, 59, 20, 57, 69, 41, 0], [0, 79, 18, 2, 61, 0], [0, 22, 9, 55, 0]]",2025-04-10 19:48:31
A-n80-k10,3,"Here's an improved implementation of the `construction_heuristic` function that considers both distance and vehicle load utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined heuristic considering distance, demand, and remaining capacity
    distance_score = ctx.distance / np.max(ctx.locations)
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    demand_score = ctx.demand / ctx.vehicle_capacity
    
    # Weighted combination (tuned for better performance)
    return 0.6 * distance_score + 0.3 * (1 - capacity_utilization) + 0.1 * demand_score
```",True,2333.7455815495714,1.7906372547149658,"[[0, 49, 73, 36, 53, 67, 66, 70, 33, 77, 51, 42, 0], [0, 40, 21, 1, 7, 44, 27, 31, 13, 0], [0, 3, 74, 39, 60, 17, 78, 34, 0], [0, 38, 58, 32, 4, 45, 50, 76, 72, 54, 15, 47, 0], [0, 12, 5, 23, 62, 63, 11, 14, 0], [0, 10, 71, 52, 28, 79, 18, 43, 0], [0, 29, 59, 30, 6, 24, 2, 48, 0], [0, 64, 46, 25, 41, 35, 65, 69, 56, 55, 9, 0], [0, 22, 19, 26, 57, 16, 68, 61, 0], [0, 37, 8, 20, 75, 0]]",2025-04-10 19:48:33
E-n76-k14,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering both distance and remaining capacity
    distance_weight = 1.0
    capacity_weight = 0.5
    remaining_capacity = ctx.vehicle_capacity - ctx.vehicle_load - ctx.demand
    
    # Normalize factors
    normalized_distance = ctx.distance / np.max(ctx.locations)
    normalized_capacity = remaining_capacity / ctx.vehicle_capacity
    
    return distance_weight * normalized_distance - capacity_weight * normalized_capacity
```",False,N/A,1.8625869750976562,[],2025-04-10 19:49:16
E-n76-k14,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and capacity utilization
    distance_factor = ctx.distance / np.linalg.norm(ctx.locations[ctx.depot] - ctx.locations[ctx.candidate])
    capacity_factor = (ctx.vehicle_capacity - ctx.vehicle_load) / (ctx.demand + 1e-6)
    return 0.7 * distance_factor + 0.3 * (1.0 / capacity_factor)
```",False,N/A,1.8104300498962402,[],2025-04-10 19:49:18
E-n76-k14,2,"Here's an improved version of the `construction_heuristic` function that balances distance and capacity utilization:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Balanced heuristic considering distance and capacity utilization
    distance_score = ctx.distance / np.linalg.norm(
        np.array(ctx.locations[ctx.depot]) - np.array(ctx.locations[ctx.candidate])
    )
    capacity_score = (ctx.vehicle_capacity - ctx.vehicle_load) / max(ctx.demand, 1)
    return 0.6 * distance_score + 0.4 * (1 / capacity_score)
```",False,N/A,1.7843430042266846,[],2025-04-10 19:49:20
E-n76-k14,3,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Balanced heuristic considering both distance and capacity utilization
    distance_score = ctx.distance
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return 0.7 * distance_score + 0.3 * capacity_utilization * distance_score
```",True,1314.4905008090577,1.798520803451538,"[[0, 75, 68, 6, 51, 17, 12, 72, 0], [0, 67, 34, 46, 8, 15, 0], [0, 26, 7, 35, 53, 14, 71, 0], [0, 4, 45, 29, 48, 74, 73, 0], [0, 52, 27, 57, 13, 54, 19, 49, 0], [0, 30, 28, 62, 2, 0], [0, 40, 32, 44, 3, 63, 0], [0, 33, 1, 42, 41, 43, 23, 0], [0, 16, 24, 18, 50, 25, 0], [0, 38, 65, 10, 58, 39, 0], [0, 9, 31, 55, 56, 22, 0], [0, 5, 37, 20, 70, 60, 36, 0], [0, 47, 21, 69, 61, 64, 0], [0, 11, 66, 59, 0]]",2025-04-10 19:49:22
