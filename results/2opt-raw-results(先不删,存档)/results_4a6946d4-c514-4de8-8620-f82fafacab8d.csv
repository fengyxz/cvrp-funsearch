dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
X-n110-k13,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic considering both distance and demand utilization
    distance_weight = 1.0
    utilization_weight = 0.5  # Balances distance and capacity utilization
    
    # Normalized distance (0-1 range)
    normalized_dist = ctx.distance / np.max(ctx.locations)
    
    # Capacity utilization ratio (0-1 range)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_dist + 
            utilization_weight * utilization)
```",True,19148.813034247974,1.885134220123291,"[[0, 49, 14, 3, 108, 91, 6, 18, 109, 0], [0, 19, 58, 12, 41, 68, 54, 28, 31, 39, 0], [0, 52, 50, 27, 17, 95, 59, 65, 36, 93, 0], [0, 38, 5, 46, 77, 84, 24, 103, 25, 56, 30, 0], [0, 71, 80, 2, 43, 104, 60, 61, 64, 99, 0], [0, 69, 4, 101, 33, 9, 102, 55, 76, 22, 0], [0, 62, 100, 40, 47, 86, 10, 63, 72, 21, 0], [0, 1, 79, 32, 105, 45, 34, 67, 85, 89, 0], [0, 8, 48, 57, 13, 23, 70, 44, 98, 0], [0, 90, 16, 78, 29, 81, 94, 37, 107, 0], [0, 51, 11, 87, 26, 53, 15, 66, 42, 0], [0, 96, 88, 75, 73, 35, 7, 82, 74, 0], [0, 20, 92, 97, 106, 83, 0]]",2025-04-10 19:57:02
X-n110-k13,1,"Here's the improved `construction_heuristic` function:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Enhanced heuristic combining distance and capacity utilization
    distance_score = ctx.distance / np.max(ctx.locations)  # Normalized distance
    capacity_score = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity  # Utilization ratio
    
    # Weighted combination favoring closer nodes and better capacity utilization
    return 0.7 * distance_score + 0.3 * capacity_score
```

This implementation:
1. Normalizes the distance by dividing by maximum possible distance (using locations)
2. Calculates capacity utilization ratio
3. Uses weighted combination (70% distance, 30% capacity) to balance both factors
4. Returns a single score that can be used to compare candidate nodes

The weights (0.7 and 0.3) can be adjusted based on problem characteristics, but this ratio generally provides a good balance between minimizing distance and maximizing vehicle utilization.",True,18772.542258809903,1.7898101806640625,"[[0, 49, 14, 3, 108, 91, 6, 18, 109, 0], [0, 19, 58, 12, 41, 68, 54, 28, 31, 39, 0], [0, 52, 50, 27, 17, 95, 59, 65, 36, 93, 0], [0, 38, 5, 46, 77, 84, 24, 103, 25, 56, 30, 0], [0, 71, 80, 2, 43, 104, 60, 61, 64, 99, 0], [0, 69, 4, 101, 33, 9, 102, 55, 76, 22, 0], [0, 62, 100, 40, 47, 86, 10, 63, 72, 21, 0], [0, 8, 48, 57, 13, 23, 70, 44, 32, 0], [0, 1, 79, 105, 45, 34, 67, 98, 85, 89, 0], [0, 90, 16, 78, 29, 81, 94, 37, 107, 0], [0, 51, 11, 87, 26, 53, 15, 66, 42, 0], [0, 96, 88, 75, 73, 35, 7, 82, 74, 0], [0, 20, 92, 97, 106, 83, 0]]",2025-04-10 19:57:04
X-n110-k13,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined heuristic with adjusted weights for distance and capacity
    distance_score = ctx.distance
    capacity_score = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Dynamic weighting based on current vehicle load
    distance_weight = 0.8 if ctx.vehicle_load < ctx.vehicle_capacity * 0.7 else 0.5
    capacity_weight = 1 - distance_weight
    
    return distance_weight * distance_score + capacity_weight * capacity_score * 1000
```",True,18832.768031567943,1.8066740036010742,"[[0, 49, 14, 3, 108, 91, 6, 18, 109, 0], [0, 19, 58, 12, 41, 68, 54, 17, 27, 31, 39, 0], [0, 52, 50, 28, 95, 59, 65, 36, 93, 0], [0, 38, 32, 105, 45, 34, 67, 89, 46, 5, 0], [0, 71, 80, 60, 102, 101, 4, 84, 24, 103, 25, 56, 30, 0], [0, 69, 77, 26, 53, 15, 98, 11, 85, 51, 0], [0, 8, 40, 47, 86, 10, 72, 63, 100, 62, 0], [0, 1, 79, 90, 16, 70, 44, 107, 23, 0], [0, 2, 43, 83, 22, 61, 104, 64, 99, 0], [0, 48, 13, 57, 82, 7, 37, 94, 78, 0], [0, 96, 88, 75, 21, 73, 35, 81, 74, 0], [0, 55, 76, 33, 9, 87, 106, 97, 20, 0], [0, 66, 42, 92, 29, 0]]",2025-04-10 19:57:05
