dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n32-k5,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined heuristic considering distance and demand utilization
    return ctx.distance - 0.5 * (ctx.vehicle_capacity - ctx.vehicle_load - ctx.demand)
```",True,1138.8987931228896,4.406064987182617,"[[0, 30, 26, 16, 12, 1, 7, 18, 22, 29, 14, 0], [0, 27, 24, 8, 15, 10, 5, 20, 0], [0, 11, 4, 28, 23, 2, 3, 6, 0], [0, 13, 21, 31, 19, 17, 9, 0], [0, 25, 0]]",2025-04-10 23:20:35
A-n32-k5,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Weighted combination of distance and capacity utilization
    distance_weight = 1.0
    utilization_weight = 0.3
    return (distance_weight * ctx.distance) - (utilization_weight * (ctx.vehicle_capacity - ctx.vehicle_load))
```",True,1118.2647889064563,4.312968969345093,"[[0, 30, 26, 16, 12, 1, 7, 18, 22, 29, 14, 0], [0, 27, 24, 8, 10, 25, 5, 20, 0], [0, 13, 21, 31, 19, 17, 3, 23, 0], [0, 6, 2, 28, 4, 11, 9, 0], [0, 15, 0]]",2025-04-10 23:20:39
A-n32-k5,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Balanced heuristic considering both distance and remaining capacity
    return ctx.distance * (1.0 + (ctx.vehicle_capacity - ctx.vehicle_load - ctx.demand) / ctx.vehicle_capacity)
```",True,1066.2861839784664,4.316185235977173,"[[0, 5, 14, 7, 1, 12, 16, 26, 30, 0], [0, 27, 24, 18, 8, 22, 29, 10, 25, 20, 0], [0, 13, 21, 31, 19, 17, 3, 6, 0], [0, 2, 23, 28, 4, 11, 9, 0], [0, 15, 0]]",2025-04-10 23:20:44
