dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
X-n110-k13,0,"Here's the improved `construction_heuristic` function that incorporates both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and demand factors with weights
    distance_factor = ctx.distance / np.max(ctx.locations)  # Normalized distance
    demand_factor = ctx.demand / ctx.vehicle_capacity  # Normalized demand
    load_factor = ctx.vehicle_load / ctx.vehicle_capacity  # Current vehicle load
    
    # Prioritize closer nodes with higher demand when vehicle is less loaded
    return 0.6 * distance_factor + 0.3 * demand_factor + 0.1 * (1 - load_factor)
```",True,19148.813034247974,12.777586221694946,"[[0, 49, 14, 3, 108, 91, 6, 18, 109, 0], [0, 19, 58, 12, 41, 68, 54, 28, 31, 39, 0], [0, 52, 50, 27, 17, 95, 59, 65, 36, 93, 0], [0, 38, 5, 46, 77, 84, 24, 103, 25, 56, 30, 0], [0, 71, 80, 2, 43, 104, 60, 61, 64, 99, 0], [0, 69, 4, 101, 33, 9, 102, 55, 76, 22, 0], [0, 21, 72, 63, 10, 86, 47, 40, 100, 62, 0], [0, 1, 79, 32, 105, 45, 34, 67, 85, 89, 0], [0, 98, 44, 70, 23, 13, 57, 48, 8, 0], [0, 90, 16, 78, 29, 81, 94, 37, 107, 0], [0, 42, 66, 15, 53, 26, 87, 11, 51, 0], [0, 96, 88, 75, 73, 35, 7, 82, 74, 0], [0, 20, 92, 97, 106, 83, 0]]",2025-04-18 13:24:13
X-n110-k13,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and demand factors with weights
    distance_factor = ctx.distance / np.max(ctx.locations)  # Normalized distance
    demand_factor = ctx.demand / ctx.vehicle_capacity  # Normalized demand
    load_factor = ctx.vehicle_load / ctx.vehicle_capacity  # Current vehicle load
    
    # Prioritize closer nodes with higher demand when vehicle is less loaded
    return 0.6 * distance_factor + 0.3 * demand_factor + 0.1 * (1 - load_factor)
```",True,19148.813034247974,12.560588121414185,"[[0, 49, 14, 3, 108, 91, 6, 18, 109, 0], [0, 19, 58, 12, 41, 68, 54, 28, 31, 39, 0], [0, 52, 50, 27, 17, 95, 59, 65, 36, 93, 0], [0, 38, 5, 46, 77, 84, 24, 103, 25, 56, 30, 0], [0, 71, 80, 2, 43, 104, 60, 61, 64, 99, 0], [0, 69, 4, 101, 33, 9, 102, 55, 76, 22, 0], [0, 21, 72, 63, 10, 86, 47, 40, 100, 62, 0], [0, 1, 79, 32, 105, 45, 34, 67, 85, 89, 0], [0, 98, 44, 70, 23, 13, 57, 48, 8, 0], [0, 90, 16, 78, 29, 81, 94, 37, 107, 0], [0, 42, 66, 15, 53, 26, 87, 11, 51, 0], [0, 96, 88, 75, 73, 35, 7, 82, 74, 0], [0, 20, 92, 97, 106, 83, 0]]",2025-04-18 13:24:26
X-n110-k13,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance, demand and angular deviation factors
    distance_factor = ctx.distance
    demand_factor = ctx.demand / ctx.vehicle_capacity
    load_penalty = max(0, ctx.vehicle_load + ctx.demand - ctx.vehicle_capacity) * 1000
    
    # Calculate angular deviation from depot
    depot_loc = ctx.locations[ctx.depot]
    current_loc = ctx.locations[ctx.candidate]
    if len(route) > 1:
        prev_loc = ctx.locations[route[-2]]
        vec1 = prev_loc - depot_loc
        vec2 = current_loc - depot_loc
        angle = np.arccos(np.dot(vec1, vec2)/(np.linalg.norm(vec1)*np.linalg.norm(vec2)))
        angle_factor = angle / np.pi
    else:
        angle_factor = 0
    
    return distance_factor * (1 + 0.5*demand_factor + 0.3*angle_factor) + load_penalty
```",False,N/A,1.5830810070037842,[],2025-04-18 13:24:27
X-n115-k10,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined score considering distance, demand utilization, and angular similarity
    distance_score = ctx.distance
    demand_score = (ctx.vehicle_capacity - (ctx.vehicle_load + ctx.demand)) / ctx.vehicle_capacity
    depot_loc = ctx.locations[ctx.depot]
    candidate_loc = ctx.locations[ctx.candidate]
    angle = np.arctan2(candidate_loc[1]-depot_loc[1], candidate_loc[0]-depot_loc[0])
    angle_score = abs(angle) / np.pi  # Normalized to [0,1]
    
    return 0.6*distance_score + 0.3*demand_score + 0.1*angle_score
```",True,17893.60003795034,52.60647106170654,"[[0, 77, 58, 113, 65, 23, 2, 91, 41, 104, 16, 66, 17, 89, 32, 15, 0], [0, 63, 30, 54, 101, 35, 99, 49, 79, 47, 109, 18, 93, 42, 59, 95, 107, 92, 57, 100, 28, 78, 53, 29, 88, 82, 21, 52, 50, 0], [0, 70, 36, 56, 31, 11, 81, 33, 97, 61, 69, 102, 72, 26, 64, 46, 0], [0, 13, 34, 76, 55, 71, 37, 90, 39, 67, 40, 43, 68, 14, 8, 83, 84, 75, 44, 27, 105, 112, 110, 111, 0], [0, 85, 74, 1, 7, 98, 25, 19, 0], [0, 10, 106, 73, 87, 86, 60, 48, 108, 51, 22, 96, 45, 38, 80, 0], [0, 24, 103, 12, 5, 0], [0, 9, 114, 94, 20, 62, 0], [0, 3, 0], [0, 4, 0], [0, 6, 0]]",2025-04-18 13:25:46
X-n115-k10,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combined score with adjusted weights for distance and demand utilization
    distance_score = ctx.distance
    demand_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return 0.7 * distance_score + 0.3 * demand_utilization * ctx.distance
```",True,17438.18425153866,51.334815979003906,"[[0, 77, 58, 113, 65, 23, 2, 91, 41, 104, 16, 66, 17, 89, 32, 15, 0], [0, 63, 30, 54, 101, 35, 99, 49, 79, 47, 109, 18, 93, 42, 59, 95, 107, 92, 57, 100, 28, 78, 53, 29, 88, 82, 21, 52, 50, 0], [0, 13, 70, 36, 56, 31, 11, 81, 33, 76, 102, 69, 72, 26, 64, 46, 0], [0, 111, 110, 112, 105, 27, 44, 75, 84, 83, 8, 14, 68, 43, 40, 67, 39, 90, 37, 71, 98, 24, 0], [0, 85, 34, 74, 7, 1, 55, 97, 0], [0, 61, 38, 45, 96, 22, 25, 51, 19, 108, 48, 60, 86, 87, 73, 106, 10, 0], [0, 103, 80, 12, 5, 0], [0, 9, 114, 94, 20, 62, 0], [0, 3, 0], [0, 4, 0], [0, 6, 0]]",2025-04-18 13:26:38
X-n115-k10,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Prioritize nearby high-demand nodes that maximize vehicle utilization
    distance_weight = 0.6
    demand_weight = 0.4
    normalized_distance = ctx.distance / np.max(ctx.distance_matrix)
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_distance) - (demand_weight * utilization)
```",False,N/A,1.6021881103515625,[],2025-04-18 13:26:39
X-n120-k6,0,"Here's the improved `construction_heuristic` function that considers both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance with normalized demand and vehicle load utilization
    distance_factor = ctx.distance
    demand_factor = ctx.demand / ctx.vehicle_capacity
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Favor closer nodes with higher demand that better utilize vehicle capacity
    return distance_factor * (1 - 0.3 * utilization) + 50 * demand_factor
```",True,15059.450472239805,58.91543388366699,"[[0, 20, 116, 107, 61, 119, 10, 94, 84, 55, 70, 93, 16, 80, 29, 25, 73, 31, 38, 52, 88, 50, 0], [0, 96, 71, 54, 112, 45, 3, 78, 39, 42, 109, 82, 98, 13, 99, 9, 113, 64, 76, 43, 2, 49, 0], [0, 32, 91, 21, 12, 41, 5, 26, 103, 17, 18, 44, 15, 83, 58, 14, 23, 33, 79, 118, 30, 67, 0], [0, 62, 40, 57, 77, 100, 59, 60, 95, 4, 22, 37, 24, 1, 56, 11, 27, 34, 111, 102, 72, 87, 0], [0, 8, 114, 90, 6, 92, 35, 53, 81, 69, 68, 85, 89, 51, 63, 104, 105, 101, 47, 117, 108, 66, 0], [0, 36, 115, 48, 86, 65, 74, 110, 106, 7, 97, 46, 75, 19, 28, 0]]",2025-04-18 13:28:07
X-n120-k6,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance with demand and capacity utilization
    distance_weight = 0.7
    demand_weight = 0.2
    utilization_weight = 0.1
    
    normalized_distance = ctx.distance / np.max(ctx.locations)
    normalized_demand = ctx.demand / ctx.vehicle_capacity
    utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    return (distance_weight * normalized_distance 
            - demand_weight * normalized_demand 
            - utilization_weight * utilization)
```",True,15059.450472239805,58.67345309257507,"[[0, 20, 116, 107, 61, 119, 10, 94, 84, 55, 70, 93, 16, 80, 29, 25, 73, 31, 38, 52, 88, 50, 0], [0, 96, 71, 54, 112, 45, 3, 78, 39, 42, 109, 82, 98, 13, 99, 9, 113, 64, 76, 43, 2, 49, 0], [0, 32, 91, 21, 12, 41, 5, 26, 103, 17, 18, 44, 15, 83, 58, 14, 23, 33, 79, 118, 30, 67, 0], [0, 62, 40, 57, 77, 100, 59, 60, 95, 4, 22, 37, 24, 1, 56, 11, 27, 34, 111, 102, 72, 87, 0], [0, 8, 114, 90, 6, 92, 35, 53, 81, 69, 68, 85, 89, 51, 63, 104, 105, 101, 47, 117, 108, 66, 0], [0, 36, 115, 48, 86, 65, 74, 110, 106, 7, 97, 46, 75, 19, 28, 0]]",2025-04-18 13:29:05
X-n120-k6,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance with demand and capacity utilization in a balanced way
    distance_factor = ctx.distance / 1000  # Normalize distance
    demand_factor = ctx.demand / ctx.vehicle_capacity
    utilization_penalty = max(0, 1 - (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity)
    
    # Weighted combination favoring closer nodes that better utilize capacity
    return 0.6 * distance_factor + 0.3 * utilization_penalty + 0.1 * (1 - demand_factor)
```",True,15059.450472239805,59.22310996055603,"[[0, 20, 116, 107, 61, 119, 10, 94, 84, 55, 70, 93, 16, 80, 29, 25, 73, 31, 38, 52, 88, 50, 0], [0, 96, 71, 54, 112, 45, 3, 78, 39, 42, 109, 82, 98, 13, 99, 9, 113, 64, 76, 43, 2, 49, 0], [0, 32, 91, 21, 12, 41, 5, 26, 103, 17, 18, 44, 15, 83, 58, 14, 23, 33, 79, 118, 30, 67, 0], [0, 62, 40, 57, 77, 100, 59, 60, 95, 4, 22, 37, 24, 1, 56, 11, 27, 34, 111, 102, 72, 87, 0], [0, 8, 114, 90, 6, 92, 35, 53, 81, 69, 68, 85, 89, 51, 63, 104, 105, 101, 47, 117, 108, 66, 0], [0, 36, 115, 48, 86, 65, 74, 110, 106, 7, 97, 46, 75, 19, 28, 0]]",2025-04-18 13:30:04
X-n139-k10,0,"Here's the improved `construction_heuristic` function that considers both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and normalized demand/remaining capacity factors
    demand_factor = ctx.demand / ctx.vehicle_capacity
    capacity_factor = 1 - (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return ctx.distance * (1 + demand_factor - capacity_factor)
```",True,17596.78583507786,35.89295697212219,"[[0, 98, 3, 56, 91, 89, 71, 81, 104, 63, 28, 103, 138, 122, 73, 0], [0, 7, 30, 84, 29, 87, 52, 126, 95, 118, 32, 16, 124, 88, 109, 0], [0, 54, 120, 35, 58, 13, 97, 31, 50, 110, 45, 20, 121, 79, 0], [0, 9, 26, 22, 108, 94, 69, 38, 131, 34, 115, 27, 123, 74, 10, 70, 0], [0, 85, 24, 114, 137, 125, 25, 112, 23, 4, 62, 80, 41, 92, 107, 0], [0, 51, 39, 8, 57, 117, 12, 72, 44, 15, 60, 59, 42, 67, 100, 0], [0, 102, 14, 135, 33, 86, 136, 83, 68, 116, 128, 101, 11, 37, 40, 113, 0], [0, 119, 1, 18, 21, 55, 46, 43, 77, 106, 82, 105, 111, 76, 0], [0, 78, 132, 93, 130, 127, 64, 133, 75, 47, 17, 134, 6, 48, 65, 0], [0, 99, 2, 49, 90, 66, 19, 61, 5, 96, 53, 129, 36, 0]]",2025-04-18 13:31:02
X-n139-k10,1,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance with demand and capacity utilization
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return ctx.distance * (1 + capacity_utilization) + ctx.demand * 10
```",True,16830.405386952232,36.41301107406616,"[[0, 3, 8, 60, 59, 42, 67, 100, 102, 71, 81, 89, 91, 56, 98, 0], [0, 7, 30, 84, 29, 87, 52, 95, 126, 125, 25, 137, 114, 24, 85, 118, 0], [0, 54, 79, 121, 73, 45, 109, 10, 74, 50, 27, 115, 123, 70, 88, 0], [0, 16, 32, 4, 23, 9, 26, 108, 94, 69, 38, 131, 62, 124, 0], [0, 120, 133, 78, 92, 41, 80, 31, 97, 13, 58, 35, 110, 20, 0], [0, 134, 40, 37, 17, 14, 135, 33, 86, 104, 63, 28, 138, 122, 76, 0], [0, 99, 2, 49, 90, 113, 96, 5, 6, 19, 66, 12, 117, 72, 44, 57, 68, 0], [0, 51, 39, 15, 65, 48, 61, 53, 129, 36, 112, 22, 34, 0], [0, 103, 136, 47, 83, 21, 18, 55, 46, 43, 77, 106, 82, 105, 111, 0], [0, 75, 64, 127, 107, 132, 93, 130, 1, 119, 11, 101, 128, 116, 0]]",2025-04-18 13:31:39
X-n139-k10,2,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance with demand and remaining capacity
    remaining_capacity = ctx.vehicle_capacity - ctx.vehicle_load - ctx.demand
    return ctx.distance * (1 + ctx.demand/ctx.vehicle_capacity) - remaining_capacity * 0.1
```",True,16531.392310370582,35.69903922080994,"[[0, 98, 3, 56, 91, 89, 71, 81, 104, 63, 28, 103, 138, 122, 73, 0], [0, 7, 30, 84, 29, 87, 52, 126, 95, 118, 32, 16, 124, 88, 109, 0], [0, 54, 121, 120, 35, 58, 13, 97, 31, 50, 110, 45, 20, 79, 0], [0, 76, 111, 105, 82, 106, 77, 43, 46, 55, 21, 18, 1, 83, 0], [0, 9, 26, 22, 108, 94, 69, 38, 131, 34, 115, 27, 123, 74, 10, 70, 0], [0, 51, 39, 8, 15, 19, 6, 5, 96, 113, 90, 12, 117, 72, 44, 57, 0], [0, 85, 24, 114, 137, 125, 25, 112, 23, 4, 62, 80, 41, 92, 107, 0], [0, 116, 128, 101, 11, 17, 37, 40, 134, 59, 60, 42, 67, 100, 0], [0, 78, 132, 93, 130, 127, 64, 133, 75, 68, 136, 86, 33, 135, 14, 102, 0], [0, 119, 47, 65, 48, 61, 66, 49, 53, 129, 36, 2, 99, 0]]",2025-04-18 13:32:15
