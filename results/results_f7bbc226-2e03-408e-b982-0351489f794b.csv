dataset,sample_id,response,is_success,total_distance,run_time,routes,timestamp
A-n32-k5,0,"Here's the improved `construction_heuristic` function that incorporates both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and normalized demand/remaining capacity
    distance_factor = ctx.distance
    capacity_factor = ctx.demand / (ctx.vehicle_capacity - ctx.vehicle_load + 1e-6)
    return 0.7 * distance_factor + 0.3 * capacity_factor * ctx.distance
```

This implementation:
1. Considers both distance and demand factors
2. Uses a weighted combination (70% distance, 30% capacity-adjusted distance)
3. Normalizes the demand by remaining vehicle capacity
4. Adds small epsilon to prevent division by zero
5. Multiplies capacity factor by distance to maintain proper scaling",True,1118.2647889064563,4.149781227111816,"[[0, 30, 26, 16, 12, 1, 7, 18, 22, 29, 14, 0], [0, 27, 24, 8, 10, 25, 5, 20, 0], [0, 13, 21, 31, 19, 17, 3, 23, 0], [0, 6, 2, 28, 4, 11, 9, 0], [0, 15, 0]]",2025-04-18 13:08:52
A-n37-k5,0,"Here's the improved `construction_heuristic` function that considers both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and normalized demand with weights
    distance_weight = 0.7
    demand_weight = 0.3
    normalized_demand = ctx.demand / ctx.vehicle_capacity
    return (distance_weight * ctx.distance) + (demand_weight * normalized_demand * 100)
```",True,943.8064059703845,5.83507513999939,"[[0, 3, 24, 25, 35, 18, 30, 26, 31, 28, 36, 34, 15, 0], [0, 21, 16, 7, 4, 33, 5, 13, 10, 14, 23, 0], [0, 17, 9, 20, 19, 2, 12, 1, 0], [0, 22, 11, 27, 8, 32, 29, 0], [0, 6, 0]]",2025-04-18 13:09:05
A-n45-k6,0,"Here's the improved `construction_heuristic` function that incorporates both distance and demand factors:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and normalized demand/remaining capacity
    demand_factor = ctx.demand / ctx.vehicle_capacity
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return ctx.distance * (1 + demand_factor) * (1 + capacity_utilization)
```",True,1374.670464350243,4.950476169586182,"[[0, 28, 7, 32, 13, 20, 10, 9, 23, 0], [0, 26, 11, 19, 6, 44, 1, 35, 14, 2, 0], [0, 38, 25, 12, 39, 36, 42, 4, 41, 3, 0], [0, 29, 43, 5, 17, 18, 27, 0], [0, 21, 33, 8, 16, 22, 15, 0], [0, 31, 24, 37, 30, 34, 0], [0, 40, 0]]",2025-04-18 13:09:18
A-n48-k7,0,"Here's the improved `construction_heuristic` function that incorporates both distance and demand factors for better route construction:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and normalized demand/remaining capacity
    demand_factor = ctx.demand / ctx.vehicle_capacity
    capacity_utilization = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    return ctx.distance * (1 + demand_factor) * (1 + capacity_utilization)
```",True,1373.3952188803923,6.054111957550049,"[[0, 14, 17, 7, 36, 32, 35, 44, 18, 0], [0, 23, 43, 31, 5, 1, 6, 22, 0], [0, 28, 29, 21, 30, 13, 4, 42, 24, 9, 34, 45, 40, 0], [0, 3, 16, 47, 10, 2, 41, 0], [0, 27, 37, 19, 25, 38, 12, 0], [0, 15, 8, 26, 11, 46, 33, 0], [0, 39, 20, 0]]",2025-04-18 13:09:31
A-n53-k7,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance, demand and capacity utilization factors
    distance_factor = ctx.distance
    demand_factor = ctx.demand / ctx.vehicle_capacity
    utilization_factor = (ctx.vehicle_load + ctx.demand) / ctx.vehicle_capacity
    
    # Weighted combination of factors (weights can be adjusted)
    return 0.6 * distance_factor + 0.2 * demand_factor + 0.2 * utilization_factor
```",True,1385.2411111299318,6.85394287109375,"[[0, 1, 27, 8, 46, 29, 44, 30, 22, 28, 4, 25, 0], [0, 31, 20, 6, 18, 38, 35, 51, 39, 0], [0, 33, 3, 5, 14, 34, 7, 0], [0, 47, 9, 17, 41, 24, 11, 52, 0], [0, 49, 37, 2, 36, 50, 43, 23, 19, 15, 45, 12, 0], [0, 21, 13, 16, 32, 48, 40, 0], [0, 26, 10, 42, 0]]",2025-04-18 13:09:46
A-n63-k10,0,"```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and demand factors with normalized weights
    distance_factor = ctx.distance / np.max(ctx.distance_matrix)
    demand_factor = ctx.demand / ctx.vehicle_capacity
    load_factor = ctx.vehicle_load / ctx.vehicle_capacity
    
    # Favor nodes that balance distance and demand, while considering current load
    return 0.6 * distance_factor + 0.3 * demand_factor + 0.1 * (1 - load_factor)
```",False,N/A,1.630167007446289,[],2025-04-18 13:09:55
A-n80-k10,0,"Here's the improved `construction_heuristic` function that incorporates both distance and demand factors while maintaining feasibility:

```python
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    # Combine distance and demand ratio, prioritizing closer nodes with higher demand
    demand_ratio = ctx.demand / (ctx.vehicle_capacity - ctx.vehicle_load + 1e-6)
    return 0.7 * ctx.distance + 0.3 * (1 / (demand_ratio + 1e-6))
```",True,2241.250475881035,9.635875940322876,"[[0, 49, 73, 36, 42, 51, 33, 1, 13, 0], [0, 40, 21, 7, 10, 71, 14, 34, 63, 0], [0, 38, 58, 32, 50, 76, 72, 70, 67, 66, 53, 0], [0, 74, 29, 17, 31, 47, 65, 15, 64, 60, 3, 0], [0, 62, 23, 78, 43, 59, 27, 5, 44, 12, 0], [0, 54, 9, 55, 35, 41, 25, 46, 39, 77, 0], [0, 11, 79, 18, 48, 28, 52, 0], [0, 30, 68, 16, 8, 37, 2, 6, 24, 0], [0, 45, 22, 4, 56, 69, 26, 19, 75, 0], [0, 20, 57, 61, 0]]",2025-04-18 13:10:12
