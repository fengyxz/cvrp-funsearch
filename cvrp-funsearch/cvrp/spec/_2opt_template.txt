import numpy as np
from dataclasses import dataclass
from typing import Tuple, List

class FunSearch:
    def run(self, func): return func
    def evolve(self, func): return func
funsearch = FunSearch()

@dataclass
class ConstructionContext:
    depot: int
    candidate: int
    distance: float
    demand: int
    vehicle_load: int
    vehicle_capacity: int
    locations: np.ndarray

@dataclass
class LocalSearchContext:
    route: Tuple[int, ...]
    candidate_nodes: Tuple[int, ...]
    distance_matrix: np.ndarray
    demand: np.ndarray
    capacity: int

def solve(data: dict) -> List[List[int]]:
    #两阶段求解框架
    # 阶段1：启发式初始解构建
    initial_routes = greedy_initial_solution(data)
    
    # 阶段2：进化局部优化
    optimized_routes = local_search_optimization(data, initial_routes)
    
    return optimized_routes

# ========== 初始解构建阶段 ==========
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    #进化初始解构建策略,可调整权重
    # part1: you should change and modify this function
    return (1 * ctx.distance )

def greedy_initial_solution(data: dict) -> List[List[int]]:
    #基于进化权重的启发式初始解生成
    routes = []
    unvisited = set(range(len(data['demand']))) - {data['depot']}
    
    while unvisited and len(routes) < data['num_vehicles']:
        # part2: you should change and modify this function
        route = [data['depot']]
        current_load = 0
        
        while True:
            candidates = [n for n in unvisited 
                         if data['demand'][n] + current_load <= data['vehicle_capacity']]
            if not candidates: break
            
            # 生成候选上下文
            contexts = [
                ConstructionContext(
                    depot=data['depot'],
                    candidate=n,
                    distance=data['distance_matrix'][route[-1]][n],
                    demand=data['demand'][n],
                    vehicle_load=current_load,
                    vehicle_capacity=data['vehicle_capacity'],
                    locations=data['locations']
                ) for n in candidates
            ]
            
            # 选择最优候选节点
            scores = [construction_heuristic(ctx) for ctx in contexts]
            next_node = candidates[np.argmin(scores)]
            
            route.append(next_node)
            current_load += data['demand'][next_node]
            unvisited.remove(next_node)
        
        route.append(data['depot'])
        routes.append(route)
    
    return routes

# ========== 局部优化阶段 ==========
def local_search_optimization(data: dict, routes: list[list[int]]) -> list[list[int]]:
    optimized = []

    for route in routes:
        if len(route) <= 2:
            optimized.append(route)
            continue

        def calculate_route_distance(r):
            return sum(data['distance_matrix'][i][j] for i, j in zip(r[:-1], r[1:]))

        n = len(route)
        best_route = route.copy()
        best_distance = calculate_route_distance(best_route)
        improved = True

        while improved:
            improved = False
            for i in range(1, n - 2):  # depot 不动
                for j in range(i + 1, n - 1):
                    a, b = best_route[i - 1], best_route[i]
                    c, d = best_route[j], best_route[j + 1]

                    current_cost = data['distance_matrix'][a][b] + data['distance_matrix'][c][d]
                    new_cost = data['distance_matrix'][a][c] + data['distance_matrix'][b][d]

                    if new_cost < current_cost:
                        best_route[i:j + 1] = reversed(best_route[i:j + 1])
                        best_distance += new_cost - current_cost
                        improved = True

        optimized.append(best_route)

    return optimized


@funsearch.run
def evaluate(data):
    routes = solve(data)
    return routes