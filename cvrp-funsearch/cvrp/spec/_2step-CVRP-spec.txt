import numpy as np
from dataclasses import dataclass
from typing import Tuple, List

class FunSearch:
    def run(self, func): return func
    def evolve(self, func): return func
funsearch = FunSearch()

@dataclass
class ConstructionContext:
    depot: int
    candidate: int
    distance: float
    demand: int
    vehicle_load: int
    vehicle_capacity: int
    locations: np.ndarray

@dataclass
class LocalSearchContext:
    route: Tuple[int, ...]
    candidate_nodes: Tuple[int, ...]
    distance_matrix: np.ndarray
    demands: np.ndarray
    capacity: int

def solve(data: dict) -> List[List[int]]:
    """两阶段求解框架"""
    # 阶段1：启发式初始解构建
    initial_routes = greedy_initial_solution(data)
    
    # 阶段2：进化局部优化
    optimized_routes = local_search_optimization(data, initial_routes)
    
    return optimized_routes

# ========== 初始解构建阶段 ==========
@funsearch.evolve
def construction_heuristic(ctx: ConstructionContext) -> float:
    """进化初始解构建策略（可调整权重）"""
    return (1 * ctx.distance )

def greedy_initial_solution(data: dict) -> List[List[int]]:
    """基于进化权重的启发式初始解生成"""
    routes = []
    unvisited = set(range(len(data['demands']))) - {data['depot']}
    
    while unvisited and len(routes) < data['num_vehicles']:
        route = [data['depot']]
        current_load = 0
        
        while True:
            candidates = [n for n in unvisited 
                         if data['demands'][n] + current_load <= data['vehicle_capacity']]
            if not candidates: break
            
            # 生成候选上下文
            contexts = [
                ConstructionContext(
                    depot=data['depot'],
                    candidate=n,
                    distance=data['distance_matrix'][route[-1]][n],
                    demand=data['demands'][n],
                    vehicle_load=current_load,
                    vehicle_capacity=data['vehicle_capacity'],
                    locations=data['locations']
                ) for n in candidates
            ]
            
            # 选择最优候选节点
            scores = [construction_heuristic(ctx) for ctx in contexts]
            next_node = candidates[np.argmin(scores)]
            
            route.append(next_node)
            current_load += data['demands'][next_node]
            unvisited.remove(next_node)
        
        route.append(data['depot'])
        routes.append(route)
    
    return routes

# ========== 局部优化阶段 ==========
@funsearch.evolve
def local_search_optimization(data: dict, routes: List[List[int]]) -> List[List[int]]:
    """基于进化策略的局部搜索"""
    optimized = []
    for route in routes:
        if len(route) <= 2:
            optimized.append(route)
            continue

        # 生成优化上下文
        ctx = LocalSearchContext(
            route=tuple(route),
            candidate_nodes=tuple(data['demands'].nonzero()[0]),
            distance_matrix=data['distance_matrix'],
            demands=data['demands'],
            capacity=data['vehicle_capacity']
        )

        # 应用进化优化策略
        while True:
            original_cost = sum(ctx.distance_matrix[i][j] for i, j in zip(ctx.route[:-1], ctx.route[1:]))
            best_improvement = 0.0
            best_route = route.copy()

            # 2-opt邻域评估
            for i in range(1, len(ctx.route) - 2):
                for j in range(i + 1, len(ctx.route) - 1):
                    new_cost = original_cost - ctx.distance_matrix[ctx.route[i - 1]][ctx.route[i]] \
                               - ctx.distance_matrix[ctx.route[j]][ctx.route[j + 1]] \
                               + ctx.distance_matrix[ctx.route[i - 1]][ctx.route[j]] \
                               + ctx.distance_matrix[ctx.route[i]][ctx.route[j + 1]]
                    improvement = original_cost - new_cost
                    if improvement > best_improvement:
                        best_improvement = improvement
                        new_route = list(ctx.route)
                        new_route[i:j + 1] = reversed(new_route[i:j + 1])
                        best_route = new_route

            if best_improvement <= 0:
                break
            route = best_route
            ctx.route = tuple(route)

        optimized.append(route)

    return optimized

@funsearch.run
def evaluate(data: dict) -> float:
    """统一评估接口"""
    routes = solve(data)
    return total_distance(routes, data['distance_matrix'])

def calculate_route_distance(route: List[int], distance_matrix) -> float:
    """
    计算给定路径的总距离
    :param route: 路径节点列表
    :param distance_matrix: 距离矩阵
    :return: 路径总距离
    """
    distance = 0
    for i in range(len(route) - 1):
        distance += distance_matrix[route[i]][route[i + 1]]
    # 如果是回路，回到起点
    if len(route) > 0:
        distance += distance_matrix[route[-1]][route[0]]
    return distance

def total_distance(routes: List[List[int]], matrix: np.ndarray) -> float:
    return sum(matrix[i][j] for route in routes for i,j in zip(route[:-1], route[1:]))

question = read_cvrp_data('A-n45-k6.vrp')
evaluate(question)